# -*- coding: utf-8 -*-
"""Twitter Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18tilEIs-U1TAHPQ0S9C7NyRnnu1l8_1t
"""

#Load kaggle jason file because dataset is too large
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""# **Twitter Sentiment Analysis Dataset**"""

#import dataset of TSA through API
# Step 1: Install kaggle
!pip install -q kaggle

# Step 2: Import and authenticate
from kaggle.api.kaggle_api_extended import KaggleApi
api = KaggleApi()
api.authenticate()

# Step 3: Download and unzip the dataset
api.dataset_download_files('kazanova/sentiment140', path='.', unzip=True)

"""# Import the Dependencies(Libraries)"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords #the words who have no meaning we will remove
from nltk.stem.porter import PorterStemmer #make it into its root words loved to love
from sklearn.feature_extraction.text import TfidfVectorizer #text into numericals e.g negative=0
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""load dataset"""

twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding='latin-1')
twitter_data.shape

twitter_data = twitter_data.sample(n=50000, random_state=42).reset_index(drop=True)

twitter_data.head()

#column names are not given we will give
column_names = ['target', 'ids', 'date', 'flag', 'user', 'text']
twitter_data.columns = column_names

twitter_data.head()

#check missing value
twitter_data.isnull().sum()

#Check label column features 0 negative 4 positive
twitter_data['target'].value_counts()

twitter_data.replace({'target':{4:1}}, inplace=True)
twitter_data['target'].value_counts()

"""Stemming, cleaning text"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()  #this is cleaning step

  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content #this is stemming

import nltk
nltk.download('stopwords')  #first download stopwords

twitter_data['stemmed_content']=twitter_data['text'].apply(stemming)  #then apply stemming

X=twitter_data['stemmed_content']
Y=twitter_data['target']

"""Splitting data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

#now convert text data into numerical

vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)


X_test = vectorizer.transform(X_test)

"""Training Model"""

model=LogisticRegression()
model.fit(X_train, Y_train)

"""Accuracy Score"""

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""Save model"""

import pickle
filename = 'trained_model.sav'
pickle.dump(model, open(filename, 'wb'))